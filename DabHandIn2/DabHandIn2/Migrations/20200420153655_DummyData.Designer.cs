// <auto-generated />
using DabHandIn2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DabHandIn2.Migrations
{
    [DbContext(typeof(HelpRequestContext))]
    [Migration("20200420153655_DummyData")]
    partial class DummyData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DabHandIn2.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentauId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentauId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Name = "Dab HandIn #2",
                            StudentauId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Name = "GUI for coffee shop",
                            StudentauId = 2
                        });
                });

            modelBuilder.Entity("DabHandIn2.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            Name = "Databaser"
                        },
                        new
                        {
                            CourseId = 2,
                            Name = "GUI"
                        });
                });

            modelBuilder.Entity("DabHandIn2.Models.Exercise", b =>
                {
                    b.Property<string>("Lecture")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentauId")
                        .HasColumnType("int");

                    b.HasKey("Lecture", "Number");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentauId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Lecture = "Seeding Data in EF Core",
                            Number = 56,
                            CourseId = 1,
                            StudentauId = 1
                        });
                });

            modelBuilder.Entity("DabHandIn2.Models.Student", b =>
                {
                    b.Property<int>("auId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("auId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            auId = 1,
                            Email = "Agri@Agri.com",
                            Name = "Nikolaj AGRI"
                        },
                        new
                        {
                            auId = 2,
                            Email = "Rosendal@Rosendal.com",
                            Name = "Fredeirk"
                        });
                });

            modelBuilder.Entity("DabHandIn2.Models.StudentCourse", b =>
                {
                    b.Property<int>("auId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("auId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            auId = 1,
                            CourseId = 1,
                            Active = true,
                            Semester = 4
                        },
                        new
                        {
                            auId = 2,
                            CourseId = 1,
                            Active = true,
                            Semester = 4
                        },
                        new
                        {
                            auId = 1,
                            CourseId = 2,
                            Active = true,
                            Semester = 4
                        },
                        new
                        {
                            auId = 2,
                            CourseId = 2,
                            Active = true,
                            Semester = 4
                        });
                });

            modelBuilder.Entity("DabHandIn2.Models.Teacher", b =>
                {
                    b.Property<int>("auId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("auId");

                    b.HasIndex("CourseId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            auId = 1,
                            CourseId = 1,
                            Name = "Henrik Kirk"
                        },
                        new
                        {
                            auId = 2,
                            CourseId = 2,
                            Name = "Poul Ejnar"
                        });
                });

            modelBuilder.Entity("DabHandIn2.Models.Assignment", b =>
                {
                    b.HasOne("DabHandIn2.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DabHandIn2.Models.Student", null)
                        .WithMany("Assignments")
                        .HasForeignKey("StudentauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DabHandIn2.Models.Exercise", b =>
                {
                    b.HasOne("DabHandIn2.Models.Course", "Course")
                        .WithMany("Exercises")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DabHandIn2.Models.Student", null)
                        .WithMany("Exercises")
                        .HasForeignKey("StudentauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DabHandIn2.Models.StudentCourse", b =>
                {
                    b.HasOne("DabHandIn2.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DabHandIn2.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("auId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DabHandIn2.Models.Teacher", b =>
                {
                    b.HasOne("DabHandIn2.Models.Course", "Course")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
